Multiprocessing is a package that supports spawning processes using an API similar to the threading module. The multiproccesing package offers both local and remote concurency, effectivelly side-stepping the Global Interpreter Lock by using subprocceses instead of threads. Due to this the multiproccessing module allows the programmer to fully leverage multiple processors on a given machine.Pool object which offers a coveninent means of parallelizing the execution of a function across multiple input values, distributing the input data across processes (data parallelism). The following example demostrate the common practice of defining such functions in a module so that child processes can successfully import that module 


from multiprocessing import Pool

def function_A(x):
	return x*x

if __name__=='__main__':
	p=Pool(5)
	print (p.map(f,[1,2,3]))
	print (p.map(f,[2,4,6]))


The Process class
In multiprocessing, processes are spawned by creating a Process object and  then calling its start() method. Process follows the API of threading 


from multiprocessing import Process 

def f(name):
	print ("Hello",name)

if __name__=="__main__":
	p=Process(target=f, args('bob',))
	p.start()
	p.join()

To show the individual 	process id involved.here is an expanded exapmle

from multiprocessing import Process
import os

def info(title):
	print title
	print ("module_name:",__name__)
	if hasattr(os,'getppid'):
		print ("parent process:",os.getppid())
	print 'process id:',os.getpid()

def f(name):
	info('Function f')
	print ("Hello",name)

if __name__=="__main__":
	info('main line')
	p=Process(target=f, args('bob',))
	p.start()
	p.join()


Exchanging objects between processes

multiprocessing supports two types of communication channel between processes

1.Queues

from multiprocessing import Process, Queue

def f(q):
	q.put([42,None,'hello'])

if __name__=='__main__':
	q=Queue()
	p=Process(target=f,args=(q,))
	p.start()
	print(q.get())
	p.join()